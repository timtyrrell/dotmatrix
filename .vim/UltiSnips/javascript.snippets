priority -50

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
}
endsnippet

snippet for "for (...) {...} (counting up)" b
for (let ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${VISUAL}$0
}
endsnippet

snippet ford "for (...) {...} (counting down, faster)" b
for (let ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${VISUAL}$0
}
endsnippet

snippet if "if statement"
if (${1:true}) {
	${0}
}
endsnippet

snippet ife "if/else statement"
if (${1:true}) {
	${2}
} else {
	${0}
}
endsnippet

# tertiary conditional
snippet ter
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}

endsnippet

# switch
snippet switch
switch (${1:expression}) {
	case '${3:case}':
		${4}
		break
	${0}
	default:
		${2}
}
endsnippet

# case
snippet case
case '${1:case}':
	${2}
	break
${0}
endsnippet

# try
snippet try
try {
	${1}
} catch (${2:e}) {
	${0:/* handle error */}
}
endsnippet

# try finally
snippet tryf
try {
	${1}
} catch (${2:e}) {
	${0:/* handle error */}
} finally {
	${3:/* be executed regardless of the try / catch result*/}
}
endsnippet

# throw Error
snippet terr
throw new Error('${1:error message}')
endsnippet

# return
snippet ret
return ${0:result}
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet vf "Function assigned to let"
${1:let}${2:function_name} = $2(${3}) => {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
((${1:window}) => {
	${VISUAL}$0
}(${2:$1}))
endsnippet

snippet timeout "setTimeout function"
setTimeout(() => {
	${VISUAL}$0
}, ${1:10})
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for (${1:prop} in ${2:obj}){
	if ($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

# Snippets for Console Debug Output
snippet de
debugger
endsnippet

snippet ca "console.assert" b
console.assert(${1:assertion}, ${2:'${3:message}'})
endsnippet

snippet cclear "console.clear" b
console.clear()
endsnippet

snippet cdir "console.dir" b
console.dir(${1:object})
endsnippet

snippet cdirx "console.dirxml" b
console.dirxml(${1:object})
endsnippet

snippet ce "console.error" b
console.error(${1:'${2:value}'})
endsnippet

snippet cgroup "console.group" b
console.group('${1:label}')
${VISUAL}$0
console.groupEnd()
endsnippet

snippet cgroupc "console.groupCollapsed" b
console.groupCollapsed('${1:label}')
${VISUAL}$0
console.groupEnd()
endsnippet

snippet ci "console.info" b
console.info(${1:'${2:value}'})
endsnippet

snippet cl "console.log" b
console.log(${1:'${2:value}'})
endsnippet

snippet cd "console.debug" b
console.debug(${1:'${2:value}'})
endsnippet

snippet cprof "console.profile" b
console.profile('${1:label}')
${VISUAL}$0
console.profileEnd()
endsnippet

snippet ctable "console.table" b
console.table(${1:'${2:value}'})
endsnippet

snippet ctime "console.time" b
console.time('${1:label}')
${VISUAL}$0
console.timeEnd("$1")
endsnippet

snippet ctimestamp "console.timeStamp" b
console.timeStamp('${1:label}')
endsnippet

snippet ctrace "console.trace" b
console.trace()
endsnippet

snippet cw "console.warn" b
console.warn(${1:'${2:value}'})
endsnippet

# html (JSX)

snippet div "<div>" w
<div>
	$0
</div>
endsnippet

snippet div. "<div> with class" w
<div`!p snip.rv=' className="' if t[1] else ""`${1:name}`!p snip.rv = '"' if t[1] else ""`>
	$0
</div>
endsnippet

snippet div# "<div> with ID & class" w
<div`!p snip.rv=' id="' if t[1] else ""`${1:name}`!p snip.rv = '"' if t[1] else ""``!p snip.rv=' className="' if t[2] else ""`${2:name}`!p snip.rv = '"' if t[2] else ""`>
	$0
</div>
endsnippet

snippet h1 "XHTML <h1>" w
<h1>$0</h1>
endsnippet

snippet h2 "XHTML <h2>" w
<h2>$0</h2>
endsnippet

snippet h3 "XHTML <h3>" w
<h3>$0</h3>
endsnippet

snippet h4 "XHTML <h4>" w
<h4>$0</h4>
endsnippet

snippet a "Link" w
<a href="${1:http://www.${2:url.com}}"${3: target="_blank"}>${4:Anchor Text}</a>
endsnippet

snippet p "paragraph" w
<p>$0</p>
endsnippet

snippet li "list item" w
<li>$0</li>
endsnippet

snippet ul "unordered list" w
<ul>
$0
</ul>
endsnippet

snippet td "table cell" w
<td>$0</td>
endsnippet

snippet th "table header" w
<th>$0</th>
endsnippet

snippet tr "table row" w
<tr>$0</tr>
endsnippet

snippet form "XHTML <form>" w
<form>
	$0
</form>
endsnippet

snippet label_and_input
<label for="${2:$1}">${1}</label>
<input type="${3:text}" name="${4:$2}"${5: id="${6:$2}"} value="${7}" />${8}
endsnippet

snippet input
<input type="${1:text}" value="${2}" name="${3}"${4: id="${5:$3}"}/>${7}
endsnippet

snippet submit
<input type="submit" value="${2}" ${3}/>${7}
endsnippet

snippet textarea
<textarea name="$2"${3: id="$4"}>$5</textarea>
endsnippet

snippet img
<img src="$1"${2: alt="$3"}/>
endsnippet

snippet const
const ${1} = ${0}
endsnippet

snippet let
let ${1} = ${0}
endsnippet

snippet im
import ${1} from '${0}'
endsnippet

snippet cla
class ${1} {
	${0}
}
endsnippet

snippet clax
class ${1} extends ${2} {
	${0}
}
endsnippet

snippet af 
(${1}) => {
	${0}
}
endsnippet

snippet ed
export default ${0}
endsnippet


snippet =>
(${1}) => {
  ${0}
}
endsnippet

### React snippets ###
snippet rt "create React component using file Template" b
import React, {Component, PropTypes } from 'react'

class ${1:`!p snip.rv = snip.basename.title().replace('_', '')`} extends Component {

	constructor(..args) {
		super(...args)
	}

	render() {
		return (
			<div>
				$0
			</div>
		)
	}

}

$1.propTypes = {
}

export default $1
endsnippet

snippet rft "create functional React component using file Template" b
import React, { PropTypes } from 'react'

const ${1:Component} = () => {
	return (
		<div>$0</div>
	)
}

$1.propTypes = {
}

export default $1
endsnippet

snippet rc "create React Component" b
class ${1:Component} extends React.Component {

	constructor(...args) {
		super(...args)
	}

	render() {
		return (
			<div>$0</div>
		)
	}

}
endsnippet

snippet rfc "create functional React component" b
const ${1:Component} = () => {
	return (
		<div>$0</div>
	)
}
endsnippet

snippet cwm "Component Will Mount" b
componentWillMount() {
	${1}
}$0
endsnippet

snippet cdm "Component Did Mount" b
componentDidMount() {
	${1}
}$0
endsnippet

snippet cwrp "Component Will Receive Props" b
componentWillReceiveProps(nextProps) {
	${1}
}$0
endsnippet

snippet scu "Should Component Update" b
shouldComponentUpdate(nextProps, nextState) {
	${1}
}$0
endsnippet

snippet cwu "Component Will Update" b
componentWillUpdate(nextProps, nextState) {
	${1}
}$0
endsnippet

snippet cdu "Component Did Update" b
componentDidUpdate(prevProps, prevState) {
	${1}
}$0
endsnippet

snippet cwum "Component Will Unmount" b
componentWillUnmount() {
	${1}
}$0
endsnippet

snippet pt "propTypes" b
${1}.propTypes = {
	${2}: PropTypes.${3:string},
};
endsnippet

snippet ren
render() {
	return (
		${1:<div />}
	)
}$0
endsnippet

snippet dstate "default state" i
state = {
	${1}: $0
}
endsnippet

snippet sst "set state" b
this.setState({
	${1}: ${2}
});$0
endsnippet

# mocha

# vim:ft=snippets:
